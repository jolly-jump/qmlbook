# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012-2014 JÃ¼rgen Bocklage-Ryannel and Johan Thelin. This
# work is licensed under a Creative Commons Attribution-NonCommercial 4.0
# International License
# This file is distributed under the same license as the Qt5 Cadaques Book
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Qt5 Cadaques Book 2015-03\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-02-13 22:07+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"

#: ../../ch12/index.rst:3
msgid "Storage"
msgstr ""

#: ../../ch12/index.rst:11
msgid "Last Build: |today|"
msgstr ""

#: ../../ch12/index.rst:13
msgid ""
"The source code for this chapter can be found in the `assets folder "
"<../../assets>`_."
msgstr ""

#: ../../ch12/index.rst:16
msgid ""
"This chapter will cover storing data using Qt Quick in Qt 5. Qt Quick "
"offers only limited ways of storing local data directly. In this sense it"
" acts more like a browser. In many projects storing data is handled by "
"the C++ backend and the required functionality is exported to the Qt "
"Quick frontend side. Qt Quick does not provide you with access to the "
"host file system to read and write files as you are used from the Qt C++ "
"side. So it would be the task of the backend engineer to write such a "
"plugin or maybe use a network channel to communicate with a local server,"
" which provides these capabilities."
msgstr ""

#: ../../ch12/index.rst:18
msgid ""
"Every application need to store smaller and larger information "
"persistently. This can be done locally on the file system or remote on a "
"server. Some information will be structured and simple (e.g. settings), "
"some will be large and complicated for example documentation files and "
"some will be large and structured and will require some sort of database "
"connection. Here we will mainly cover the built in capabilities of Qt "
"Quick to store data as also the networked ways."
msgstr ""

#: ../../ch12/index.rst:21
msgid "Settings"
msgstr ""

#: ../../ch12/index.rst:23
msgid ""
"Qt comes on its native side with the C++ ``QSettings`` class, which "
"allows you to store the application settings (aka options, preferences) "
"in a system dependent way. It uses the infrastructure available from your"
" OS. Additional it supports a common INI file format for handling cross "
"platform settings files."
msgstr ""

#: ../../ch12/index.rst:25
msgid ""
"In Qt 5.2 ``Settings`` have entered the QML world. The API is still in "
"the labs module, which means the API may break in the future. So be "
"aware."
msgstr ""

#: ../../ch12/index.rst:27
msgid ""
"Here is a small example, which applies a color value to a base rectangle."
" Every time the user clicks on the window a new random color is "
"generated. When the application is closed and relaunched again you should"
" see your last color. The default color should be the color initially set"
" on the root rectangle."
msgstr ""

#: ../../ch12/index.rst:48
msgid ""
"The settings value are stored every time the value changes. This might be"
" not always what you want. To store the settings only when required you "
"can use standard properties."
msgstr ""

#: ../../ch12/index.rst:64
msgid ""
"It is also possible to store settings into different categories using the"
" ``category`` property."
msgstr ""

#: ../../ch12/index.rst:76
msgid ""
"The settings are stored according your application name, organization and"
" domain. This information is normally set in the main function of your "
"c++ code."
msgstr ""

#: ../../ch12/index.rst:90
msgid "Local Storage - SQL"
msgstr ""

#: ../../ch12/index.rst:94
msgid ""
"Qt Quick supports an local storage API known from the web browsers the "
"local storage API. the API is available under \"import "
"QtQuick.LocalStorage 2.0\"."
msgstr ""

#: ../../ch12/index.rst:96
msgid ""
"In general it stores the content into a SQLITE database in system "
"specific location in an unique ID based file based on the given database "
"name and version. It is not possible to list or delete existing "
"databases. You can find the storage location from "
"``QQmlEngine::offlineStoragePath()``."
msgstr ""

#: ../../ch12/index.rst:98
msgid ""
"You use the API by first creating a database object and then creating "
"transactions on the database. Each transaction can contain one or more "
"SQL queries. The transaction will roll-back when a SQL query will fail "
"inside the transaction."
msgstr ""

#: ../../ch12/index.rst:100
msgid ""
"For example to read from a simple notes table with a text column you "
"could use the local storage like this::"
msgstr ""

#: ../../ch12/index.rst:119
msgid "Crazy Rectangle"
msgstr ""

#: ../../ch12/index.rst:120
msgid ""
"As an example assume we would like to store the position of a rectangle "
"on our scene."
msgstr ""

#: ../../ch12/index.rst:125
msgid "Here our base example."
msgstr ""

#: ../../ch12/index.rst:155
msgid ""
"You can drag the rectangle freely around. When you close the application "
"and launch it again the rectangle is at the same position."
msgstr ""

#: ../../ch12/index.rst:157
msgid ""
"Now we would like to add that the x/y position of the rectangle is stored"
" inside the SQL DB. For this we need to add an ``init``, ``read`` and "
"``store`` database function. These function are called when on component "
"completed and on component destruction."
msgstr ""

#: ../../ch12/index.rst:191
msgid ""
"You could also extract the DB code in an own JS library, which does all "
"the logic. This would be the preferred way if the logic gets more "
"complicated."
msgstr ""

#: ../../ch12/index.rst:193
msgid ""
"In the database initialization function we create the DB object and "
"ensure the SQL table is created."
msgstr ""

#: ../../ch12/index.rst:206
msgid ""
"The application next calls the read function to read existing data back "
"from the database. Here we need to differentiate if there is already data"
" in the table. To check we look into how many rows the select clause has "
"returned."
msgstr ""

#: ../../ch12/index.rst:229
msgid ""
"We expect the data is stored a JSON string inside the value column. This "
"is not typical SQL like, but works nicely with JS code. So instead of "
"storing the x,y as properties in the table we store them as a complete JS"
" object using the JSON stringify/parse methods. At the end we get a valid"
" JS object with x and y properties, which we can apply on our crazy "
"rectangle."
msgstr ""

#: ../../ch12/index.rst:231
msgid ""
"To store the data, we need to differentiate the update and insert cases. "
"We use update when a record already exists and insert if no record under "
"the name \"crazy\" exists."
msgstr ""

#: ../../ch12/index.rst:253
msgid ""
"Instead of selecting the whole record set we could also use the SQLITE "
"count function like this: ``SELECT COUNT(*) from data where name = "
"\"crazy\"`` which would return use one row with the amount of rows "
"affected by the select query. Otherwise this is common SQL code. As an "
"additional feature, we use the SQL value binding using the ``?`` in the "
"query."
msgstr ""

#: ../../ch12/index.rst:255
msgid ""
"Now you can drag the rectangle and when you quit the application the "
"database stores the x/y position and applies it on the next application "
"run."
msgstr ""

#: ../../ch12/index.rst:258
msgid "Other Storage APIs"
msgstr ""

#: ../../ch12/index.rst:260
msgid ""
"To store directly from within QML these are the major storage types. The "
"real strength of Qt Quick comes from the fact to extend it with C++ to "
"interface with your native storage systems or use the network API to "
"interface with a remote storage system, like the Qt cloud."
msgstr ""

