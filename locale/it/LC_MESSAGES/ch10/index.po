# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012-2014 JÃ¼rgen Bocklage-Ryannel and Johan Thelin. This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License
# This file is distributed under the same license as the Qt5 Cadaques Book package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Qt5 Cadaques Book 2015-03\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-01-25 23:25+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Language-Team: Italian (https://www.transifex.com/qmlbook/teams/82765/it/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: it\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../ch10/index.rst:3
msgid "Multimedia"
msgstr ""

#: ../../ch10/index.rst:11
msgid "Last Build: |today|"
msgstr ""

#: ../../ch10/index.rst:13
msgid ""
"The source code for this chapter can be found in the `assets folder "
"<../../assets>`_."
msgstr ""

#: ../../ch10/index.rst:16
msgid ""
"The multimedia elements in the QtMultimedia makes it possible to playback "
"and record media such as sound, video or pictures. Decoding and encoding is "
"handled through platform specific backends. For instance, the popular "
"gstreamer framework is used on Linux, while DirectShow is used on Windows "
"and QuickTime on OS X."
msgstr ""

#: ../../ch10/index.rst:18
msgid ""
"The multimedia elements are not a part of the Qt Quick core API. Instead, "
"they are provided through a separate API made available by importing "
"QtMultimedia 5.6 as shown below::"
msgstr ""

#: ../../ch10/index.rst:23
msgid "Playing Media"
msgstr ""

#: ../../ch10/index.rst:27
msgid ""
"The most basic case of multimedia integration in a QML application is for it"
" to playback media. This is done using the ``MediaPlayer`` element, "
"optionally in combination with a ``VideoOutput`` element if the source is an"
" image or video. The ``MediaPlayer`` element has a ``source`` property "
"pointing at the media to play. When a media source has been bound, it is "
"simply a matter of calling the ``play`` function to start playing."
msgstr ""

#: ../../ch10/index.rst:29
msgid ""
"If you want to play visual media, i.e. pictures or video, you must also "
"setup a ``VideoOutput`` element. The ``MediaPlayer`` running the playback is"
" bound to the video output through the ``source`` property."
msgstr ""

#: ../../ch10/index.rst:31
msgid ""
"In the example shown below, the ``MediaPlayer`` is given a file with video "
"contents as ``source``. A ``VideoOutput`` is created and bound to the media "
"player. As soon as the main component has been fully initialized, i.e. at "
"``Component.onCompleted``, the player's ``play`` function is called."
msgstr ""

#: ../../ch10/index.rst:37
msgid ""
"Basic operations such as altering the volume when playing media is "
"controlled through the ``volume`` property of the ``MediaPlayer`` element. "
"There are other useful properties as well. For instance, the ``duration`` "
"and ``position`` properties can be used to build a progress bar. If the "
"``seekable`` property is ``true``, it is even possible to update the "
"``position`` when the progress bar is tapped. The example below shows how "
"this is added to the basic playback example above."
msgstr ""

#: ../../ch10/index.rst:43
msgid ""
"The ``position`` property is only updated once per second in the default "
"case. This means that the progress bar will update in large steps unless the"
" duration of the media is long enough, compared to the number pixels that "
"the progress bar is wide. This can, however, be changed through accessing "
"the ``mediaObject`` property and its ``notifyInterval`` property. It can be "
"set to the number of milliseconds between each position update, increasing "
"the smoothness of the user interface."
msgstr ""

#: ../../ch10/index.rst:49
msgid ""
"The code above does not have any effect on the update interval! There seems "
"to be no media object..."
msgstr ""

#: ../../ch10/index.rst:51
msgid ""
"When using ``MediaPlayer`` to build a media player, it is good to monitor "
"the ``status`` property of the player. It is an enumeration of the possible "
"statuses, ranging from ``MediaPlayer.Buffered``to "
"``MediaPlayer.InvalidMedia``. The possible values are summarized in the "
"bullets below:"
msgstr ""

#: ../../ch10/index.rst:53
msgid "``MediaPlayer.UnknownStatus``. The status is unknown."
msgstr ""

#: ../../ch10/index.rst:54
msgid ""
"``MediaPlayer.NoMedia``. The player has no media source assigned. Playback "
"is stopped."
msgstr ""

#: ../../ch10/index.rst:55
msgid "``MediaPlayer.Loading``. The player is loading the media."
msgstr ""

#: ../../ch10/index.rst:56
msgid ""
"``MediaPlayer.Loaded``. The media has been loaded. Playback is stopped."
msgstr ""

#: ../../ch10/index.rst:57
msgid "``MediaPlayer.Stalled``. The loading of media has stalled."
msgstr ""

#: ../../ch10/index.rst:58
msgid "``MediaPlayer.Buffering``. The media is being buffered."
msgstr ""

#: ../../ch10/index.rst:59
msgid ""
"``MediaPlayer.Buffered``. The media has been buffered, this means that the "
"player can start playing the media."
msgstr ""

#: ../../ch10/index.rst:60
msgid ""
"``MediaPlayer.EndOfMedia``. The end of the media has been reached. Playback "
"is stopped."
msgstr ""

#: ../../ch10/index.rst:61
msgid ""
"``MediaPlayer.InvalidMedia``. The media cannot be played. Playback is "
"stopped."
msgstr ""

#: ../../ch10/index.rst:63
msgid ""
"As mentioned in the bullets above, the playback state can vary over time. "
"Calling ``play``, ``pause`` or ``stop`` alters the state, but the media in "
"question can also have effect. For example, the end can be reached, or it "
"can be invalid, causing playback to stop. The current playback state can be "
"tracked through the ``playbackState`` property. The values can be "
"``MediaPlayer.PlayingState``, ``MediaPlayer.PausedState`` or "
"``MediaPlayer.StoppedState``."
msgstr ""

#: ../../ch10/index.rst:65
msgid ""
"Using the ``autoPlay`` property, the ``MediaPlayer`` can be made to attempt "
"go to the playing state as soon as a the ``source`` property is changed. A "
"similar property is the ``autoLoad`` causing the player to try to load the "
"media as soon as the ``source`` property is changed. The latter property is "
"enabled by default."
msgstr ""

#: ../../ch10/index.rst:67
msgid ""
"It is also possible to let the ``MediaPlayer`` to loop a media item. The "
"``loops`` property controls how many times the ``source`` is to be played. "
"Setting the property to ``MediaPlayer.Infinite`` causes endless looping. "
"Great for continious animations or a looping background song."
msgstr ""

#: ../../ch10/index.rst:70
msgid "Sound Effects"
msgstr ""

#: ../../ch10/index.rst:74
msgid ""
"When playing sound effects, the response time from requesting playback until"
" actually playing becomes important. In this situation, the ``SoundEffect`` "
"element comes in handy. By setting up the ``source`` property, a simple call"
" to the ``play`` function immediately starts playback."
msgstr ""

#: ../../ch10/index.rst:76
msgid ""
"This can be utilized for audio feedback when tapping the screen, as shown "
"below."
msgstr ""

#: ../../ch10/index.rst:82
msgid ""
"The element can also be utilized to accompany a transition with audio. To "
"trigger playback from a transition, the ``ScriptAction`` element is used."
msgstr ""

#: ../../ch10/index.rst:88
msgid ""
"In addition to the ``play`` function, a number of properties similar to the "
"ones offered by ``MediaPlayer`` are available. Examples are ``volume`` and "
"``loops``. The latter can be set to ``SoundEffect.Infinite`` for infinite "
"playback. To stop playback, call the ``stop`` function."
msgstr ""

#: ../../ch10/index.rst:90
msgid ""
"When the PulseAudio backend is used, ``stop`` will not stop instantaneously,"
" but only prevent further loops. This is due to limitations in the "
"underlying API."
msgstr ""

#: ../../ch10/index.rst:93
msgid "Video Streams"
msgstr ""

#: ../../ch10/index.rst:97
msgid ""
"The ``VideoOutput`` element is not limited to usage in combination with "
"``MediaPlayer`` elements. It can also be used directly with video sources to"
" show a live video stream. Using a ``Camera`` element as ``source`` and the "
"application is complete. The video stream from a ``Camera`` can be used to "
"provide a live stream to the user. This stream works as the search view when"
" capturing photos."
msgstr ""

#: ../../ch10/index.rst:104
msgid "Capturing Images"
msgstr ""

#: ../../ch10/index.rst:108
msgid ""
"One of the key features of the ``Camera`` element is that is can be used to "
"take pictures. We will use this in a simple stop-motion application. In it, "
"you will learn how to show a viewfinder, snap photos and to keep track of "
"the pictures taken."
msgstr ""

#: ../../ch10/index.rst:110
msgid ""
"The user interface is shown below. It consists of three major parts. In the "
"background, you will find the viewfinder, to the right, a column of buttons "
"and at the bottom, a list of images taken. The idea is to take a series of "
"photos, then click the Play Sequence button. This will play the images back,"
" creating a simple stop-motion film."
msgstr ""

#: ../../ch10/index.rst:115
msgid ""
"The viewfinder part of the camera is simply a ``Camera`` element used as "
"``source`` in a ``VideoOutput``. This will show the user a live videostream "
"from the camera."
msgstr ""

#: ../../ch10/index.rst:121
msgid ""
"The list of photos is a ``ListView`` oriented horizontally shows images from"
" a ``ListModel`` called ``imagePaths``. In the background, a semi-"
"transparent black ``Rectangle`` is used."
msgstr ""

#: ../../ch10/index.rst:127
msgid ""
"For the shooting of images, you need to know that the ``Camera`` element "
"contains a set of sub-elements for various tasks. To capture still pictures,"
" the ``Camera.imageCapture`` element is used. When you call the ``capture`` "
"method, a picture is taken. This results in the ``Camera.imageCapture`` "
"emitting first the ``imageCaptured`` signal followed by the ``imageSaved`` "
"signal."
msgstr ""

#: ../../ch10/index.rst:133
msgid ""
"To intercept the signals of a sub-element, a ``Connections`` element is "
"needed. In this case, we don't need to show a preview image, but simply add "
"the resulting image to the ``ListView`` at the bottom of the screen. Shown "
"in the example below, the path to the saved image is provided as the "
"``path`` argument with the signal."
msgstr ""

#: ../../ch10/index.rst:139
msgid ""
"For showing a preview, connect to the ``imageCaptured`` signal and use the "
"``preview`` signal argument as ``source`` of an ``Image`` element. A "
"``requestId`` signal argument  is sent along both the ``imageCaptured`` and "
"``imageSaved``. This value is returned from the ``capture`` method. Using "
"this, the capture of an image can be traced through the complete cycle. This"
" way, the preview can be used first and then be replaced by the properly "
"saved image. This, however, is nothing that we do in the example."
msgstr ""

#: ../../ch10/index.rst:141
msgid ""
"The last part of the application is the actual playback. This is driven "
"using a ``Timer`` element and some JavaScript. The ``_imageIndex`` variable "
"is used to keep track of the currently shown image. When the last image has "
"been shown, the playback is stopped. In the example, the ``root.state`` is "
"used to hide parts of the user interface when playing the sequence."
msgstr ""

#: ../../ch10/index.rst:148
msgid "Advanced Techniques"
msgstr ""

#: ../../ch10/index.rst:152
msgid ""
"The Camera API of Qt 5 is really lacking in documentation right now. I would"
" love to cover more advanced camera controls such as exposure and focusing, "
"but there are no ranges or values, nor clear guides to how to use the APIs "
"in the reference docs right now."
msgstr ""

#: ../../ch10/index.rst:155
msgid "Implementing a Playlist"
msgstr ""

#: ../../ch10/index.rst:159
msgid ""
"The Qt 5 multimedia API does not provide support for playlists. Luckly, it "
"is easy to build one. The idea is to be able to set it up with a model of "
"items and and a ``MediaPlayer`` element, as shown below. The ``Playlist`` "
"element is resposible for setting the ``source`` of the ``MediaPlayer``, "
"while the playstate is controlled via the player."
msgstr ""

#: ../../ch10/index.rst:165
msgid ""
"The first half of the ``Playlist`` element, shown below, takes care of "
"setting the ``source`` element given an index in the ``setIndex`` function. "
"It also implements the ``next`` and ``previous`` functions to navigate the "
"list."
msgstr ""

#: ../../ch10/index.rst:171
msgid ""
"The trick to make the playlist continue to the next element at the end of "
"each element is to monitor the ``status`` property of the ``MediaPlayer``. "
"As soon as the ``MediaPlayer.EndOfMedia`` state is reached, the index is "
"increased and playback resumed, or, if the end of the list is reached, the "
"playback is stopped."
msgstr ""

#: ../../ch10/index.rst:178
msgid "Summary"
msgstr ""

#: ../../ch10/index.rst:182
msgid ""
"The media API provided by Qt provides mechanisms for playing and capturing "
"video and audio. Through the ``VideoOutput`` element and video source can be"
" displayed in the user interface. Through the ``MediaPlayer`` element, most "
"playback can be handled, even though the ``SoundEffect`` can be used for "
"low-latency sounds. For capturing, or only showing a live video stream, the "
"``Camera`` element is used."
msgstr ""
